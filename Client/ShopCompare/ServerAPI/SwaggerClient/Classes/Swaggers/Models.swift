// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
                let sourceString = source as! String
                for formatter in formatters {
                    if let date = formatter.dateFromString(sourceString) {
                        return date
                    }
                }
                print("formatter failed to parse \(sourceString)")
                return NSDate()
            } 

			// Decoder for [PriceMdl]
            Decoders.addDecoder(clazz: [PriceMdl].self) { (source: AnyObject) -> [PriceMdl] in
                return Decoders.decode(clazz: [PriceMdl].self, source: source)
            }
			// Decoder for PriceMdl
            Decoders.addDecoder(clazz: PriceMdl.self) { (source: AnyObject) -> PriceMdl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PriceMdl()
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.product = Decoders.decodeOptional(clazz: ProductMdl.self, source: sourceDictionary["product"])
                instance.profile = Decoders.decodeOptional(clazz: ProfileMdl.self, source: sourceDictionary["profile"])
                instance.createdAt = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["createdAt"])
                instance.store = (sourceDictionary["store"] as? String).map { PriceMdl.Store(rawValue: $0)! } 
                instance.imageUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imageUrl"])
                return instance
            }
			

			// Decoder for [ProductMdl]
            Decoders.addDecoder(clazz: [ProductMdl].self) { (source: AnyObject) -> [ProductMdl] in
                return Decoders.decode(clazz: [ProductMdl].self, source: source)
            }
			// Decoder for ProductMdl
            Decoders.addDecoder(clazz: ProductMdl.self) { (source: AnyObject) -> ProductMdl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductMdl()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.barcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["barcode"])
                instance.category = (sourceDictionary["category"] as? String).map { ProductMdl.Category(rawValue: $0)! } 
                instance.prices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["prices"])
                return instance
            }
			

			// Decoder for [ProductResponseMdl]
            Decoders.addDecoder(clazz: [ProductResponseMdl].self) { (source: AnyObject) -> [ProductResponseMdl] in
                return Decoders.decode(clazz: [ProductResponseMdl].self, source: source)
            }
			// Decoder for ProductResponseMdl
            Decoders.addDecoder(clazz: ProductResponseMdl.self) { (source: AnyObject) -> ProductResponseMdl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProductResponseMdl()
                instance.productMdl = Decoders.decodeOptional(clazz: ProductMdl.self, source: sourceDictionary["productMdl"])
                instance.bestPrice = Decoders.decodeOptional(clazz: PriceMdl.self, source: sourceDictionary["bestPrice"])
                instance.otherPrices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["otherPrices"])
                instance.totalSum = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["totalSum"])
                return instance
            }
			

			// Decoder for [ProfileMdl]
            Decoders.addDecoder(clazz: [ProfileMdl].self) { (source: AnyObject) -> [ProfileMdl] in
                return Decoders.decode(clazz: [ProfileMdl].self, source: source)
            }
			// Decoder for ProfileMdl
            Decoders.addDecoder(clazz: ProfileMdl.self) { (source: AnyObject) -> ProfileMdl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProfileMdl()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"])
                instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.prices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["prices"])
                return instance
            }
			
        }
    }
}
